/* C-style comments, not nestable
 * Attempts to register a fake device
 */

test-name "Registration test" // Name for the test

import registration // Import definitions from an external file

$sessionID = { // Variable array definition
	0x00 0x00 0x00 0x00 // Hex defined bytes
	0x00 0x00 0x00 0x00 // All numbers are 8 bit
	0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00
}

$messageLength = 54 // Decimal bytes
$operationType = 0b00000001 // Binary bytes

assert length($sessionID) == 16 // Make sure that a variable is of a specific size

$controlSegment = {
	$sessionID // Using variables in messages
	0x00 0x00 0x00 $messageLength
	$operationType
}

$registrationSegment = {
	$userID // Variable from the registration module
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 // Camera ID - generated by server
	$authKey // Camera Auth key from the registration module
	"abcdef" // MAC Address - string bytes - only ASCII chars, no null terminator, quotes
}

// Send data down the stream
send {
	$controlSegment
	$registrationSegment
}

$operationType = 0b10000001 // Variable redefinition
$controlSegment = {
	$sessionID // Using variables in messages
	0x00 0x00 0x00 $messageLength
	$operationType
}

// Receive data from the stream
receive {
	$controlSegment // Matches bytes in the incoming stream. Will receive length($controlSegment) bytes regardless of content, throws error on console. Behaves like an assert
	$userID
	[16]>$cameraID // Saves sixteen bytes to a variable instead of matching bytes
	[16] // Skip sixteen bytes
	"abcdef" // MAC Address
}

assert not all $cameraID == 0x00 // EXP SYNTAX - Assert that cameraID isn't all zeroes

// Stop after assert failed or continue?

print "Registration step one completed" // Print string on console
print "Obtained camera ID:"
print $cameraID // Output variable name, length and contents

$operationType = 0b00000001 // Variable redefinition
$controlSegment = {
	$sessionID // Using variables in messages
	0x00 0x00 0x00 $messageLength
	$operationType
}

$registrationSegment = {
	$userID
	$cameraID // Put in the ID obtained from the server
	$authKey
	"abcdef"
}

send {
	$controlSegment
	$registrationSegment
}

$operationType = 0b10000001 // Variable redefinition
$controlSegment = {
	$sessionID // Using variables in messages
	0x00 0x00 0x00 $messageLength
	$operationType
}

// Server echoes back the packet with response bit set
receive {
	$controlSegment
	$registrationSegment
}

export $cameraID camID // Export variable to definitions file

// Automatically close the connection